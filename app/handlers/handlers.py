import os

from aiogram import F, Router
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery, FSInputFile

from app.handlers.generation import generation_router
from app.misc import get_random_start_image, activate_promo_code
from app.exceptions import *
import app.keyboards as kb
import app.database.functions as fn

router = Router()
router.include_router(generation_router)


@router.message(CommandStart(deep_link=True, magic=None))
async def promo_code(message: Message, command: CommandObject):
    try:
        user_id = message.from_user.id
        promo_code = command.args

        reward = await activate_promo_code(user_id, promo_code)

        await fn.update_tokens(user_id, reward)
        balance = await fn.get_tokens(user_id)
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\!\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–ª–∞–Ω—Å ‚Äî {balance} tokens\(\+{reward}\)")
    except PromocodeInvalidException:
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –∏–ª–∏ —É –Ω–µ–≥–æ –∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—èüíî")
    except PromocodeAlreadyActivatedException:
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\!")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \n{e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(CommandStart(deep_link=False, magic=None))
async def cmd_start(message: Message):
    try:
        await fn.register_user(message.from_user.id)
        photo = FSInputFile(os.path.join('assets/start_images', await get_random_start_image()))
        await message.answer_photo(
            photo,
            caption=f"‚úã–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}\!\n\n–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –∞–Ω–∏–º–µ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É\. –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ò–ò, –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π, —Ç–∞–∫–∏–µ –∫–∞–∫: Cetus\.\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: `anime girl in white clothes with a red bow`\.",
            reply_markup=kb.start
        )
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \n{e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(Command("balance"))
async def balance(message: Message):
    try:
        user_id = message.from_user.id
        balance = await fn.get_tokens(user_id)
        await message.answer(f"üí∏–ë–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω–æ–≤")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \n{e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
